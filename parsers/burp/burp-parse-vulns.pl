#!/usr/bin/perl
require Burpsuite::Parser;
require Frontier::Client;
use File::Basename;
use Data::Dumper;
use YAML;

### TODO - implement command line file parsing

## step 1: open file
open my $options, '<', '../../settings/options.yaml' or die "can't open config file: $!";

## step 2: convert YAML file to perl hash ref
my $config = YAML::LoadFile($options);
print Dumper($config);

my $bpx = new Burpsuite::Parser;

my $filepath = $ARGV[0];
print "DEBUG: loading file: " . $filepath;
my ($filename, $directories, $suffix) = fileparse($filepath);

print "DEBUG: opening xml file\n";
##Burpsuite::Parser Object
my $parser = $bpx->parse_file( $filepath );

print "DEBUG: parsing xml file\n";
##Array of Burpsuite::Parser::Issue Objects
my @results = $parser->get_all_issues();

## stuff all issues into an array 
##my @ticket_array;

my %tickets;

print "DEBUG: iterating thru objects\n";

foreach my $h ( @results ) { 
   print "DEBUG: adding " . $h->name . "\n";
    
   if (exists $tickets{$h->name}){
      print " DEBUG: already exists\n";
      $tickets{$h->name}{'affects'} = $tickets{$h->name}{'affects'} .  "\n" . $h->host . $h->location;
      $tickets{$h->name}{'proof'} = $tickets{$h->name}{'proof'} .  "\n" . $h->issue_detail;

   } 
   else{
      print "DEBUG: new issue\n";

      ### do the translation
      $tickets{$h->name}{'type'} = $h->type;
      $tickets{$h->name}{'serial'} = $h->serial_number;
      $tickets{$h->name}{'summary'} =  $h->name;
      $tickets{$h->name}{'description'} = $h->issue_background;
      $tickets{$h->name}{'affects'} = $h->host . $h->location;
      $tickets{$h->name}{'path'} = $h->path;
      $tickets{$h->name}{'priority'} = $h->severity;
      $tickets{$h->name}{'proof'} = $h->issue_detail; 
      $tickets{$h->name}{'recommendations'} = $h->remediation_background;
      $tickets{$h->name}{'references'} = "Burp Suite Report: " . $filename;

      $component = $h->host;
      $component =~ s/http?:\/\///g;

      $tickets{$h->name}{'component'} = $component;
   }
}

$url = $config->{'settings'}{'protocol'}. "://" . $config->{'settings'}->{'username'} . ":" . $config->{'settings'}->{'password'} ."\@" . $config->{'settings'}->{'server'} . "/projects/". $config->{'settings'}->{'project'} ."/xmlrpc";
print "DEBUG: creating bridge to trac\n"; ##. $url;

## create the bridge to trac
my $server = Frontier::Client->new( 'url' => $url );

##print keys %tickets;
##values %tickets; 
##print "\n";
##print Dumper(%tickets);

for $ticketname ( keys %tickets ) { 
   print "DEBUG: creating ticket " . $tickets{$ticketname}{'summary'} ."\n";

   my %attributes = (); 

   ## Stuff the attributes in a hash
   $attributes{'type'} = "finding";
   $attributes{'priority'} = $tickets{$ticketname}{'priority'};
   $attributes{'proof'} = $tickets{$ticketname}{'proof'};
   $attributes{'recommendations'} = $tickets{$ticketname}{'recommendations'};
   $attributes{'references'} = $tickets{$ticketname}{'references'};
   $attributes{'affects'} = $tickets{$ticketname}{'affects'};
   $attributes{'component'} = $tickets{$ticketname}{'component'};


   ### Getting stupid error when i try this: 
   $attributes{'damagepotential'} = '0';
   $attributes{'reproducibility'} = '0';
   $attributes{'exploitability'} = '0';
   $attributes{'affectedusers'} = '0';
   $attributes{'discoverability'} = '0';


  print "DEBUG: creating trac ticket\n";

   ## run the ticket creation function...
   $response = $server->call('ticket.create', $tickets{$ticketname}{'summary'} , $tickets{$ticketname}{'description'}, {%attributes});

   print "Creating ticket: " . $_ . " - " . $response . "\n";

   ##read a line first - so we can debug
   ##$userinput =  <STDIN>;
}

print "end."
