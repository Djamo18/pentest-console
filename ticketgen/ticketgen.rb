#!/usr/bin/ruby

require 'pp'
require 'xmlrpc/client'
require 'optparse'
require 'yaml' # Assumed in future examples


## hash for all the options
options = {}
options[:username] = ""
options[:password] = ""
options[:project] = ""
options[:server] = ""
options[:filename] = ""

## Get options from YAML
## 
CONFIG = YAML::load(File.read('options.yaml'))
options[:username] = CONFIG['settings']['username']
options[:password] = CONFIG['settings']['password']
options[:project] = CONFIG['settings']['project']
options[:server] = CONFIG['settings']['server']
options[:filename] = CONFIG['settings']['filename']

## Set up the option parser
optparse = OptionParser.new do|opts|
   opts.banner = "Usage: ticketgen.rb --user [user] --pass [pass] --project [project] --server [server] --filename [ticketfile]" 

   ## Gather command-line options
   opts.on('-h', '--help', 'Help Screen') do
      puts opts
      exit
   end
   
   opts.on('-v', '--verbose', 'Verbose Output') do
      options[:verbose] = true
      exit
   end

   opts.on('-u', '--user USER', String, 'Trac Username') do |username|
      options[:username]  = username
   end

   opts.on('-p', '--password PASSWORD', String, 'Trac Password') do |password|
      options[:password]  = password
   end  

   opts.on('-r', '--project PROJECT', String, 'Trac Project') do |project|
      options[:project]  = project
   end

   opts.on('-s', '--server SERVER', String, 'Trac Server') do |server|
      options[:server]  = server
   end
 
   opts.on('-f', '--filename FILENAME', String, 'Trac Tickets (filename)') do |filename|
      options[:filename] = filename
   end
end


# Parse the command-line. Remember there are two forms
# of the parse method. The 'parse' method simply parses
# ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for
# the options. What's left is the list of files to resize.
optparse.parse!


## Gather interactively if not specified
if options[:username].to_s.empty? then
   puts "User:"
   options[:username] = gets
end

if options[:password].to_s.empty? then
   puts "Password:"
   options[:password] = gets
end

if options[:project].to_s.empty? then
   puts "Project:"
   options[:project] = gets
end

if options[:server].to_s.empty? then
   puts "Server:"
   options[:server] = gets
end

if options[:filename].to_s.empty? then
   puts "Filename:"
   options[:filename] = gets
end

## ensure we have strings
String username = options[:username]
String password = options[:password]
String server = options[:server]
String project = options[:project]

## remove newlines
username.chomp!
password.chomp!
server.chomp!
project.chomp!

## construct the project url
url = "https://" + username + ":" + password + "\@" + server + "/projects/" + project + "/login/xmlrpc"

##puts "DEBUG: URL: " + url + "\n\n\n"

# initialize the connection (username and password can be ommitted if not needed, but most of the time you will need them if anonymous doesn't have XMLRPC permissions)
server = XMLRPC::Client::new2(url)

## generate a ticket for each line of the flie
ticketlist = File.open(options[:filename], "r")

ticketlist.each_line do|line|
	
	if line[0].chr != "#"
		##puts "DEBUG: line[0]: " + line[0].chr + "\n";
		puts "generating ticket: #{line}"

		ticket_array = line.split(",")
		ticket_name = ticket_array[0]
		ticket_desc = ticket_array[1]		
		##filename = ticket_name.sub(/ /,"_")

		##File.open("wiki/OWASP_" + filename) if File::exists?( "wiki/OWASP_" + filename )

		results = server.call("ticket.create",ticket_name,ticket_desc,{},false)
	end
end
