=== Summary ===
In this test we want to check that cookies and other session tokens are created in a secure and unpredictable way. An attacker that is able to predict and forge a weak cookie can easily hijack sessions of legitimate users. 

Due to the importance of the data that they store, cookies are vital in the overall security of the application. Being able to tamper with cookies may result in hijacking the sessions of legitimate users, gaining higher privileges in an active session, and in general influencing the operations of the application in an unauthorized way. In this test we have to check whether the cookies issued to clients can resist a wide range of attacks aimed to interfere with the sessions of legitimate users and with the application itself. The overall goal is to be able to forge a cookie that will be considered valid by the application and that will provide some kind of unauthorized access (session hijacking, privilege escalation, ...). Usually the main steps of the attack pattern are the following:

 * cookie collection: collection of a sufficient number of cookie samples;
 * cookie reverse engineering: analysis of the cookie generation algorithm;
 * cookie manipulation: forging of a valid cookie in order to perform the attack. This last step might require a large number of attempts, depending on how the cookie is created (cookie brute-force attack). 

Another pattern of attack consists of overflowing a cookie. Strictly speaking, this attack has a different nature, since here we are not trying to recreate a perfectly valid cookie. Instead, our goal is to overflow a memory area, thereby interfering with the correct behavior of the application and possibly injecting (and remotely executing) malicious code.

Questions Answered: 
 * Are all Set-Cookie directives tagged as Secure? 
 * Do any Cookie operations take place over unencrypted transport? 
 * Can the Cookie be forced over unencrypted transport? 
 * If so, how does the application maintain security? 
 * Are any Cookies persistent? 
 * What Expires= times are used on persistent cookies, and are they reasonable? 
 * Are cookies that are expected to be transient configured as such? 
 * What HTTP/1.1 Cache-Control settings are used to protect Cookies? 
 * What HTTP/1.0 Cache-Control settings are used to protect Cookies? 

=== Specific Steps ===
 * Determine all usage of cookies within the application
  * Understand the structure of the cookie
   * Toy with the charset of the cookie
   * Play with the structure of the cookie
  * Modify cookie values to determine how values affect the operation of the application
 * Determine if cookie values are:
  * Unpredictable - Does the cookie contain some hard-to-guess data
  * Tamper resistant - Does the application double-check important values (for instance, with an encrypted hash)
  * Expiring - Is it deleted from disk after an appropriate period of time?
  * Secure - Does it use the secure-only flag?

=== Notes ===

=== References ===
 * http://www.owasp.org/index.php/Testing_for_Cookie_and_Session_Token_Manipulation
